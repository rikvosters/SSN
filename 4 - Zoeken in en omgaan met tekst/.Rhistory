enkele_ismen <- c("voetbalvandalismen", "emancipatiekatholicisme", "Cruyffianisme", "schisma", "waardenfetisjisme"); enkele_ismen
test_woorden <- c("stroop", "schaap","chloor", "schreier", "spruit", "schlemiel", "draaideur"); test_woorden
grep("[bcdfghjklmnpqrstvwxz]{3,}[auoeiy]{2}", test_woorden, value=T, ignore.case=T)
grep("[^aeuoiy]{3,}[auoeiy]{2}", test_woorden, value=T, ignore.case=T)
test_mail <- c("Rik.Vosters@vub.ac.be", "anoniem1995@gmail.com", "rvosters@vub.ac.be", "Pieter.Johan.Verzele@vub.ac.be", "Willy.Spottebeen@ulb.ac.be", "lwk@vub.ac.be", "http://vub.ac.be", "LIST@vub.ac.be", "info@vub.ac.be"); test_mail
test_mail <- c("Rik.Vosters@vub.ac.be", "anoniem1995@gmail.com", "rvosters@vub.ac.be", "Pieter.Johan.Verzele@vub.ac.be", "Willy.Spottebeen@ulb.ac.be", "lwk@vub.ac.be", "http://vub.ac.be", "LIST@vub.ac.be", "info@vub.ac.be"); test_mail
##################################################
##                                              ##
##   SYNCHRONISCHE STUDIE VAN HET NEDERLANDS    ##
##                                              ##
##################################################
#### Zoeken in en omgaan met tekst ####
### Plakken en splitten -----
## Plakken -----
# Een tekstvector die bestaat uit meerdere losse elementen kan samengevoegd worden tot één geheel met het commando `paste()`. Paste voegt alle vectoren én alle elementen binnen elke vector samen tot een geheel, gescheiden door de gekozen `collapse`-separator. De functie neemt dus als eerste argument de tekstvector waarvan de elementen moeten worden samengevoegd, en heeft als optie `collapse`. Met deze optie geef je aan hoe de samengevoegde elementen van elkaar gescheiden moeten worden. Meestal wordt hier een spatie voor gebruikt (`collapse=" "`).
# Laten we als voorbeeld een tekstvector met 15 losse elementen aanmaken:
blauwbilgorgel <- c("Mijn", "vader", "was", "een", "porgel.", "Mijn", "moeder", "was", "een", "porulan.", "Daar", "komen", "vreemde", "kinderen", "van.")
# We kunnen die 15 losse elementen dan als volgt samenvoegen tot één element:
voorbeeld <- paste(blauwbilgorgel, collapse=" ")
voorbeeld
## Split -----
# Split werkt net omgekeerd: als je vertrekt van één tekstvector met één lang element, kan je dat lange stuk tekst met de functie `strsplit()` opsplitsen in meerdere elementen. Je moet daarvoor aangeven wat als `split`-element geldt: als dat bijvoorbeeld een spatie is, zal de tekst op elk punt dat een spatie voorkomt opgesplitst worden.
# Als illustratie splitsen we de `voorbeeld`-vector uit de vorige paragraaf weer op in losse stukjes, met een spatie als als `split`-element.
voorbeeld
gesplitst_voorbeeld <- strsplit(voorbeeld, split=" ")
gesplitst_voorbeeld
# Merk wel op het resultaat van deze `strsplit`-functie een lijst is. Dat duidt erop dat je ook vectoren met meerdere elementen kan opsplitsen. Om van de lijst gewoon weer een 'platte' tekstvector te maken, gebruik je de functie `unlist`:
gesplitst_voorbeeld
unlist(gesplitst_voorbeeld)
# Op basis van zo'n tekstvector kunnen we later tabellen met woordfrequenties in een tekst of een collectie teksten aanmaken -- als voorproefje:
# als basis voor bijv. frequentielijst:
table(unlist(gesplitst_voorbeeld))
# Vergelijk het voorgaande voorbeeld nu eens met het onderstaande commando -- wat is het verschil?
strsplit(voorbeeld, "")
# Het `split`-argument is hier leeg of onbestaande: merk op dat er geen spatie tussen de aanhalingstekens staat. Dit betekent dus dat er tussen elk teken gesplitst zal worden, wat een lijst met alle karakters (letters, getallen, spaties, enz.) oplevert. Door hier met `table()` een eenvoudige frequentielijst van te maken kan je snel een handig overzicht krijgen van alle tekens die in je tekst of corpus voorkomen.
table(unlist(strsplit(voorbeeld, "")))
# Verder werkt `strsplit` ook voor vectoren die meerdere elementen omvatten. Vergelijk het voorgaande met onderstaand voorbeeld, waarbij de vector `voorbeeld2` uit drie elementen bestaat.
voorbeeld2 <- c("Mijn vader was een porgel.", "Mijn moeder was een porulan.", "Daar komen vreemde kinderen van.")
voorbeeld2 # 3 elementen
# Als we deze vector opsplitsen met een spatie als `split`-argument, krijgen we een lijst met drie ingebedde vectoren:
gesplitst_voorbeeld2 <- strsplit(voorbeeld2, " ")
gesplitst_voorbeeld2 # output: lijst met 3 vectoren
# Als we hier `unlist` op toepassen, worden alle niveau's van de lijst weer samengegooid tot één grote tekstvector:
unlist(gesplitst_voorbeeld2)
### Zoeken naar tekst: grep() -----
## De functie grep() -----
# Simpele zoekopdrachten naar tekst voeren we uit met de functie `grep()`. Deze functie neemt als eerste argument tussen aanhalingstekens de tekst waarnaar je zoekt, en als tweede argument de vector waarin je wil zoeken. Met de code `grep("zoekpatroon", tekstvector)` zoek je dus naar het woord `zoekpatroon` in de vector `tekstvector`. Als de gezochte tekst gevonden wordt, spreken we van een 'match'.
# Standaard geeft de functie `grep()` echter enkel de positie van de match in de tekstvector weer. We maken even een korte tekstvector bestaande uit 4 elementen met korte zinnen aan, om dit te illustreren.
vermaelen <- c("Goedenavond", "Wij zijn Willy en Jos Vermaelen van Vermaelens Projects", "Wij willen graag uw aandacht vestigen op een nieuw initiatief van onzentwege","Een kleine moeite voor Vermaelens Projects, betekent misschien een wereld van verschil")
vermaelen
# Als we in deze vector zoeken naar het woord 'Projects' zonder verdere specifiëring, krijgen we dus de posities van de matches:
grep("Projects", vermaelen) # positie
# Je leest dus af dat de gezochte tekst in het tweede en in het vierde element van deze tekstvector voorkomt.
# Als we niet de positie maar het element met de match zelf willen terugkrijgen, gebruiken we de optie `value=TRUE`:
grep("Projects", vermaelen, value=TRUE) # match zelf (hele element)
# Nu zie je dus dat de twee elementen waarin de zoekexpressie `Projects` (met hoofdletter) voorkomt, deze twee zinnen zijn.
# Deze functie is zonder verdere specifiëring hoofdlettergevoelig wat de gezochte tekst betreft. Dat verklaart waarom onderstaande zoekexpressie geen resultaat oplevert, terwijl we weten dat de naam `Willy` wel in de vector voorkomt:
grep("willy", vermaelen, value=TRUE) # geen resultaat (lege tekstvector)
# We kunnen als oplossing hiervoor uiteraard onze zoekexpressie aanpassen, of de gehele vector converteren naar kleine letters -- bijvoorbeeld:
grep("willy", tolower(vermaelen), value=TRUE)
# Handiger echter is om de optie `ignore.case=TRUE` van de functie `grep()` in te schakelen. Die optie zorgt ervoor dat je zoekopdracht niet meer hoofdlettergevoelig is.
grep("willy", vermaelen, value=TRUE, ignore.case=TRUE)
## Enkele beperkingen van de `grep()`-aanpak -----
# Toch is het werken met deze zoekfunctie `grep()` niet altijd ideaal voor taalkundig onderzoek.
# Eén van de beperkingen is immers dat het hele element waarin de match voorkomt, wordt weergegeven, in plaats van bijvoorbeeld enkel het gezochte element. Als je zoekt op woorden, zoals in de bovenstaande voorbeelden, is dat niet zo'n probleem. Maar als je bijvoorbeeld in dezelfde vector met de drie Vermaelen-zinnetjes zou willen zoeken op de diftong `ij`, vormt dit wel een probleem. Als je immers zoekt met:
grep("ij", vermaelen, value=TRUE)
# Krijg je de twee elementen waarin 1 of meer `ij`'s voorkomen als resultaat, in plaats van de precieze woorden en plaatsen waar die `ij` overal opduikt.
# Een tweede beperking is dat `grep()` je bij een match steeds het element van die match slechts één keer weergeeft, ook al kunnen er binnen dat element meerdere matches zijn. Dat is bijvoorbeeld het geval met onze zoekfunctie naar `ij` van zonet:
grep("ij", vermaelen, value=TRUE)
# Zoals je in de output van de console kan zien, komen in de twee zinnen uit de vector `vermaelen` meerdere `ij`'s voor. Toch komt elk element (in dit geval: elke zin) maar één keer in de output van `grep()` terug. Als we dus willen weten _hoe vaak_ de letters `ij` in onze vector voorkomen, kan `grep()` helaas geen uitsluitsel geven.
# Om aan deze beperkingen tegemoet te komen, zullen we verderop in de syllabus zien dat er specifieke zoekfuncties bestaan voor taalkundig gebruik, die eigenlijk als een uitbreiding op `grep()` kunnen worden gezien: met name de speciaal ontwikkelde functie `exact.matches()`.
## Terzijde: grepl() -----
# Een soms wel handige variant op `grep()` is `grepl()`. In plaats van de positie van de matches of elementen met de matches zelf te geven, geeft `grepl()` je een logische vector als resultaat. Eigenlijk gaat `grepl()` voor elk element in de vector in kwestie het antwoord na op de vraag: komt de ingegeven zoekexpressie in dit element van de doorzochte vector voor? Het resultaat is een logische vector, met logische `TRUE`- en `FALSE`-antwoorden op de gestelde vraag. Kijk zelf maar naar de output van deze functie:
grepl("ij", vermaelen)
# Deze functie wordt soms gebruikt om subsets te maken. Stel dat je een denkbeeldig corpus hebt ingeladen als vector `corpus`, waarbij elk element in de vector één bestand uit dat corpus is. Zoals in veel corpora, kan dit corpus in een speciale hoofding ('header') informatie over de documenten in kwestie bevatten (zogenaamde `metadata`). Zo wordt bijvoorbeeld vaak in een header het documentnummer, de plaats of de datum waarop het document werd geschreven, weergegeven -- bijvoorbeeld als:
# DOCUMENT==VL.WVL.1991.0113
# PROVINCIE==WEST-VLAANDEREN
# PLAATS==BRUGGE
# JAAR==1991
# Als zo'n hoofding in elk document van het corpus voorkomt, kan je `grepl()` gebruiken om enkel een subset van het corpus te gebruiken, die aan bepaalde voorwaarden voldoet. Die voorwaarden kan je dan in een zoekexpressie uitschrijven. Zo kan je bijvoorbeeld stellen dat je enkel wil werken met documenten uit Brugge. Je zoekexpressie zou dan `PLAATS==BRUGGE` zijn:
grepl("PLAATS=BRUGGE", corpus)
# (Het uitvoeren van deze functie zal een foutmelding geven, omdat we uiteraard geen corpus onder de naam `corpus` hebben ingeladen -- het voorbeeld is puur hypothetisch).
# Deze `grepl()`-functie is handig, omdat je ze -- zoals gezegd -- kan gebruiken om te subsetten. Daarvoor bed je ze binnen de vierkante haakjes in bij de vector, zoals we steeds subsets hebben gedefinieerd. Je zou dan iets krijgen als:
corpus[grepl("PLAATS=BRUGGE", corpus)]
# Met een dergelijke syntaxis ga je dus een subset van je corpus maken, met enkel de documenten die in Brugge werden geschreven. (Of juister: met enkel de documenten die ergens in het document of in de hoofding de tekst `PLAATS=BRUGGE` bevatten). Je kan dit uiteraard gebruiken om allerlei verschillende subsets van je corpus te maken.
### Zoeken met reguliere expressies -----
# We hebben zonet al gezien, dat we met de gewone zoekexpressies in `grep()` op enkele beperkingen stoten. We hebben ons tot nu toe echter wel beperkt tot zoekexpressies waarbij we gewoon het woord dat we zoeken in zijn geheel ingeven. Dat is niet fout, maar maakt het moeilijk om breed te gaan zoeken.
# Laten we om dit te illustreren even een vector met enkele woorden in te laden:
# > aantal, aard, aardappel, aardappelen, aardappels, aardig
vekkie <- c("aantal", "aard", "aardappel", "aardappelen", "aardappels", "aardig")
# Als we willen zoeken naar alle vormen van het lemma "aardappel", kunnen we natuurlijk manueel meerdere zoekfuncties schrijven met alle mogelijke voorkomens van "aardappel" erin:
vekkie <- c("aantal", "aard", "aardappel", "aardappelen", "aardappels", "aardig")
grep("aardappel", vekkie, value=TRUE, ignore.case=TRUE)
grep("aardappels", vekkie, value=TRUE, ignore.case=TRUE)
grep("aardappelen", vekkie, value=TRUE, ignore.case=TRUE)
# Dit is echter weinig efficiënt. Om in één zoekexpressie naar meerdere varianten van eenzelfde item te zoeken, maken we gebruik van __reguliere expressies__.
# Reguliere expressies (afgekort 'regex' of 'grep') is een soort simpele syntaxis waarmee je zoekpatronen voor tekstherkenning en tekstmanipulatie kan omschreven. Je kunt ze vergelijken met de [jokertekens](https://support.office.com/nl-nl/article/Tekst-of-andere-items-zoeken-en-vervangen-50b45f26-c4b8-4003-b9e4-315a3547f69c#bm8) waarmee je kan zoeken in o.a. Microsoft Word: als je daar zoekt op `bedr?g`, kan je zowel `bedrag` als `bedrog` als zoekresultaat terugkrijgen. Op een vergelijkbare manier laten reguliere expressies je ook toe om efficiëntere en complexere zoek- (en vervang-)opdrachten uit te voeren.
# Om in onze voorbeeldvector te zoeken naar alle vormen van het lemma "aardappel", kunnen we onderstaande reguliere expressie gebruiken:
grep("aardappel(en|s)?", vekkie, value=TRUE, ignore.case=TRUE)
# We gaan hieronder in op de manier waarop reguliere expressies worden opgebouwd, zodat je kan begrijpen waarom deze zoekexpressies alle drie de gewenste resultaten geeft. We behandelen uiteraard enkel de basis, maar met reguliere expressies kan je erg complexe zoekopdrachten uitwerken. Om je er wat verder in te verdiepen, kan je altijd terecht bij één van de vele handleidingen en tutorials die het internet rijk is.
# Aanraders zijn bijvoorbeeld:
# Roger Peng - Regular Expressions: video tutorial - https://www.youtube.com/watch?v=NvHjYOilOf8
# Roger Peng - Regular Expressions in R: video tutorial - https://www.youtube.com/watch?v=q8SzNKib5-4
# Programmeren in ASP.NET/Reguliere expressies: handleiding (NL) - https://nl.wikibooks.org/wiki/Programmeren_in_ASP.NET/Reguliere_expressies (De zoekfuncties zelf zijn in deze tutorial in de programmeeertaal ASP.NET geschreven, in plaats van in R, maar de reguliere expressies zelf zijn nagenoeg identiek)
# Gloria Li and Jenny Bryan - Regular Expression in R: handleidijng (ENG) - https://stat545-ubc.github.io/block022_regular-expression.html (vanaf het deel over 'Regular expression syntax')
# Handige overzichten met de meest gebruikte regex-uitdrukkingen vind je bijvoorbeeld op:
# http://www.ch.embnet.org/CoursEMBnet/Pages05/slides/regexp.pdf
# http://www.cheatography.com/davechild/cheat-sheets/regular-expressions/
# http://www.rexegg.com/regex-quickstart.html
# http://regexrenamer.sourceforge.net/help/regex_quickref.html
# Een uitstekend naslagwerk is:
# * Goyvaerts, J., & Levithan, S. (2012). _Regular expressions cookbook_. 2nd ed. Beijing: O’Reilly.
# Ook met de ingebouwde help-functie van _R_ kan je heel wat nuttige informatie opzoeken:
?regex
## Informatie -----
# In principe staat elk teken in de regex-taal voor zichzelf. Als je dus zoekt naar `abc`, zal je enkel een element dat de letterlijke opeenvolging van de letters `abc` bevat als match krijgen.
# Toch zijn er uitzonderingen: bepaalde tekens hebben een speciale betekenis indien ze binnen een reguliere expressie worden gebruikt. Met name de volgende tekens hebben een speciale functie:      ^  [  .  $  {  *  (  \  +  )  |  ?  <  >
# Een eerste soort speciale tekens in reguliere expressies helpen bij het zoeken naar concrete informatie: ze vervangen concrete tekens of reeksen tekens waarnaar je zoekt.
# Regex             | Betekenis
# --------------------------------------------------------------------------------
# .                 | 1 willekeurig teken (behalve een nieuwe regel)
# (  |  )           | letterlijke match van één van de door `|`  gescheiden opties
# [ ]               | 1 van de tekens tussen haakjes (ev. een range, bijv. `a-z` of `0-9`)
# [^ ]              | elk teken _behalve_ 1 van de tekens tussen haakjes
# \\w               | om het even welk woordteken ('word character', i.e. letters of cijfers, idem als `[A-Za-Z0-9]`)
# \\W               | om het even welk niet-woordteken ('non-word character', i.e. alles behalve letters en cijfers)
# \\d               | om het even welk cijfer ('digit', idem als `[0-9]`)
# \\D               | om het even welk teken dat geen cijfer is ('non-digit')
# Enkele voorbeelden:
# Voorbeeld-regex   | Mogelijke matches
# ----------------------------------------------------------------------------------
# gr.t              | `grot`, `grut`, `gr t`, `gr!t`, … (maar niet: `groot`, `grt`, …)
# al(zo|dus|weer)   | `alzo`, `aldus`, `alweer` (maar niet: `al`, `alvorens`, `weeral`, …)
# [a-z]             | `a`, `b`, `c`, …, `z` (maar niet: `A`, `?`, `_`, …)
# [a-zA-z]          | `a`, `b`, `c`, …, `z`, `A`, `B`, `C`, …, `Z`
# H[0-9]O           | `H0O`, `H1O`, `H2O`, …, `H9O` (maar niet: `HO`, `HHO`, …)
# b[^oa]s           | `bes`, `bis`, `bbs`, `b1s`, `bês`, … (maar niet: `bos`, `bas`, `bijs`, `bies`, `bs`, …)
# b[ao][ao]s        | `baas`, `boos`, `baos` en `boas` (maar niet: `bas` of `bos`)
# b\\ws             | `bes`, `bos`, `bbs`, `b1s`, `bas`, … (maar niet: `bs`, `b.s`, `b-s`, `b&s`, …)
# is\\W             | `is.`, `is!`, `is?`, `is,`, … (maar niet: `is`, `ist`, `isa`, …)
# A\\d              | `A0`, `A1`, `A2`, …, `A9` (maar niet: `AA`, `00`, `1A`, …)
## Kwantificatie -----
# Naast de vorige operatoren om naar concrete informatie te zoeken, kunnen deze tekens ook gekwantificeerd worden.
# Zonder kwantificator mag elk teken precies 1 keer voorkomen.
# Als je wil dat een bepaald teken meerdere keren voorkomt, geef je de gewenste frequentie aan met accolades `{}`. Er zijn twee mogelijkheden:
# * ofwel geef je tussen accolades het precieze aantal keren weer dat het voorgaande teken mag voorkomen: `{aantal}`;
# * ofwel geef je het minimale en het maximale aantal keren weer dat het voorgaande teken mag voorkomen: `{min, max}`.
# Als je geen minimum voor de komma opgeeft, gaat _R_ uit van `0`. Als je geen maximum na de komma opgeeft, gaat _R_ uit van oneindig.
# Je kan deze kwantificators combineren met elk letterlijk teken, maar ook met de informatietekens uit de vorige paragraaf.
# Regex-kwantificator | Betekenis
# -------------------------------------------------------------------------------
# {x}                | `x` maal het voorgaande teken
# {x,y}              | minimaal `x` en maximaal `y` maal het voorgaande teken
# {,y}               | maximaal `y` maal het voorgaande teken
# {x,}               | minimaal `x` maal het voorgaande teken
# Enkele voorbeelden:
# Voorbeeld-regex     | Mogelijke matches
# ------------------------------------------------------------------------------------
# b.s                 | `bos`, `bis`, `bus`, `bss`, … (maar niet: `boos` of `buis`)
# ba{2}s              | `baas` (maar niet: `bas`, `boos`, `bos`, …)
# b.{2}s              | `boos`, `baos`, `boas`, `buus`, `buis`, `bies` (maar niet: `bos`, `bs`, `boeis`, `bis`, …)
# a{2,4}rgh           | `aargh`, `aaargh` en `aaaargh` (maar niet: `argh` of `aaaaargh`)
# ba{,2}s             | `baas`, `bas`, `bs` (maar niet: `baaas`, `bos`, `boas`, …)
# a{2,}rgh            | `aargh`, `aaargh`, `aaaargh`, maar bijv. ook `aaaaaaaaaaaaaaaaaaaaargh`
# a{2,}rgh            | `aargh`, `aaargh`, `aaaargh`, maar bijv. ook `aaaaaaaaaaaaaaaaaaaaargh`
# \\W{2,}             | `..`, `?!`, `,.`, `, … (o.a. dubbele leestekens)
# \\d{4}              | `0000`, `0001`, `0002`, …, `9998`, `9999` (maar niet: `1`, `A000`, `001`, …)
# Er zijn drie kwantificators met een speciale betekenis:
# Regex-kwantificator | Equivalent | Betekenis
# -------------------------------------------------------------------------------
# ?                   | {0,1}      | 0 of 1 maal het voorgaande teken (= optioneel)
# +                   | {1,}       | 1 of meer maal het voorgaand teken
# *                   | {0,}       | 0 of meer maal het voorgaande teken
# Enkele voorbeelden:
# Voorbeeld-regex     | Mogelijke matches
# ---------------------------------------------------------------------------------
# zoons?              | `zoon`, `zoons` (maar niet: `zoontje`, `zoonlief`, …)
# zoo?n(en|s)?        | `zoon`, `zon`, `zoons`, `zoonen`, `zons`, `zonen` (maar niet: `zonnen`, `zone`, …)
# wo+rd               | `word`, `woord`, `wooord`, `woooord`, … (maar niet: `wrd`, `werd`, …)
# dr[uo]+m            | `drom`, `drum`, `droom`, `druum`, `droum`, `droum`, `drooum`, `drooom`, … (maar niet: `driem`, `drm`, …)
# .*                  | 'stuff':  matcht elk mogelijk teken, een onbeperkt aantal keer (= dus in principe alles)
# b.*r                | `br`, `bar`, `bier`, `boer`, `b r` en `bewonderaar`, maar bijvoorbeeld ook `brengt haar`, `boven de stad Dender`, of `b maar`.
## Oefening: regex (informatie en kwantificatie) -----
# Gebruik voor onderstaande oefeningen de functie `grep()` en test je zoekexpressie op de voorbeeldvectoren die onder de opgave staan.
# 1. Schrijf een regex waarmee je kan zoeken op de laatste vier maanden van het jaar.
enkele_maanden <- c("mei", "juni", "juli", "augustus", "september", "october", "november", "december", "beroep"); enkele_maanden
grep("--regex--", enkele_maanden, value = T)
# 2. Schrijf een regex waarmee je kan zoeken op alle mogelijke spellingvarianten van het persoonlijk voornaamwoord 'ik', waarbij de `<i>` ook als een `<j>` of een `<ij>` geschreven kan worden, en de `<k>` ook als `<ck>` (maar niet als `<c>`) kan voorkomen.
test_pronomina <- c("ik", "ick", "jk", "jck", "ijck", "Ik", "wij", "Ick", "Jk", "gij", "Jck", "Ijck", "ic"); test_pronomina
# 3. Schrijf een regex om te zoeken naar alle woorden (enkelvoud en meervoud) die uitgaan op het suffix -isme.
enkele_ismen <- c("voetbalvandalismen", "emancipatiekatholicisme", "Cruyffianisme", "schisma", "waardenfetisjisme"); enkele_ismen
# 4. Schrijf een regex waarmee je kan zoeken naar elk woord dat (in de spelling) begint met een cluster van drie of meer consonanten, gevolgd twee vocalen.
test_woorden <- c("stroop", "schaap","chloor", "schreier", "spruit", "schlemiel", "draaideur"); test_woorden
# 5. Schrijf een regex om geldige VUB-e-mailadressen van personeelsleden of studenten (lange versie) mee op te sporen.
test_mail <- c("Rik.Vosters@vub.ac.be", "anoniem1995@gmail.com", "rvosters@vub.ac.be", "Pieter.Johan.Verzele@vub.ac.be", "Willy.Spottebeen@ulb.ac.be", "lwk@vub.ac.be", "http://vub.ac.be", "LIST@vub.ac.be", "info@vub.ac.be"); test_mail
### Vervangen -----
## De functie gsub() -----
# De reguliere expressies die we tot nu toe hebben gezien, kunnen niet enkel gebruikt worden om tekst te zoeken. Ze kunnen ook gebruikt worden om tekst te vervangen. Daarvoor gebruik je niet de functie `grep()`, maar de tegenhanger `gsub()` ('global substitution'). `gsub()` neemt:
# * als eerste argument het zoekpatroon (tussen dubbele aanhalingstekens);
# * als tweede argument het vervangpatroon (eveneens tussen dubbele aanhalingstekens);
# * als derde argument de vector waarop de vervangfunctie moet worden uitgevoerd;
# * als vierde argument de verplichte optie `perl=T` ('perl-compatible regex');
# * als optioneel argument de optie `ignore.case=TRUE`.
gsub("zoekpatroon", "vervangpatroon", tekst, perl=T)
# argument 1: waar wil je naar zoeken (= match)
# argument 2: door wat wil je de match vervangen
# argument 3: waarin wil je zoeken
# argument 4: perl=T ('perl-compatible regex')
# optioneel argument: ignore.case=TRUE
# Als we de vector `vermaelen` van eerder even terughalen, kunnen we er een eenvoudige zoek- en vervangactie op doorvoeren, nog zonder gebruik van reguliere expressies:
vermaelen
gsub("Wij", "Zij", vermaelen, perl=T)
vermaelen
vermaelen_2 <- gsub("Wij", "Zij", vermaelen, perl=T)
vermaelen_2
vermaelen_num <- gsub("e", "3", vermaelen, perl=T)
vermaelen_num <- gsub("i", "1", vermaelen_num, perl=T)
vermaelen_num
voorbeeld <- c("wie woont daar", "wat ruist daar"); voorbeeld
gsub("w(ie|at)", "d\\1", voorbeeld, perl=T)
voorbeeld2 <- c("waarover of waaraan moest je denken?", "daarover en daaraan dacht ik"); voorbeeld2
gsub("([wd])aar(over|aan)", "\\2 \\1at", voorbeeld2, perl=T)
minicorpus <- c("<demo_cor> is er nog iemand die plots zo een goesting heeft om zijne pc door het raam te smijten", "<demo_cor> :o))", "<demo_cor> niemand dus", "<DaP> Gore sukkels!", "<lotje> hiii dappy!!1 *kiss**kiss*", "<Daily> Chipske zit ook op de just mannen!!!", "<DeepStar> hmm")
minicorpus
politierapport <- c("De heer Philip Devaleriola, die den nacht van den zes en twintigsten den zeven en twintigsten april in de fabrijk niet doorgebragt had, op zijnen beurt ondervraagd zijnde, verklaarde dat hij bij zijne vrouw was gaan slapen, in het huis van juffrouw Johanna Roberti alhier te Brussel. Maar de juffrouw Johanna Roberti en Catharina Vanginderachter hare winkel dochter, gaven aan de Kommissaris van Policie ten antwoord, dat hij dezen nacht bij zijne vrouw geenszins doorgebragt had.")
politierapport
minicorpus <- c("<demo_cor> is er nog iemand die plots zo een goesting heeft om zijne pc door het raam te smijten", "<demo_cor> :o))", "<demo_cor> niemand dus", "<DaP> Gore sukkels!", "<lotje> hiii dappy!!1 *kiss**kiss*", "<Daily> Chipske zit ook op de just mannen!!!", "<DeepStar> hmm")
minicorpus
minicorpus_anon <- gsub("<.*> ", "", minicorpus, perl=T)
minicorpus_anon
politierapport <- c("De heer Philip Devaleriola, die den nacht van den zes en twintigsten den zeven en twintigsten april in de fabrijk niet doorgebragt had, op zijnen beurt ondervraagd zijnde, verklaarde dat hij bij zijne vrouw was gaan slapen, in het huis van juffrouw Johanna Roberti alhier te Brussel. Maar de juffrouw Johanna Roberti en Catharina Vanginderachter hare winkel dochter, gaven aan de Kommissaris van Policie ten antwoord, dat hij dezen nacht bij zijne vrouw geenszins doorgebragt had.")
politierapport
lazygreedy <- c("A structure is a reality which is immaterial, but manifests itself materially."); lazygreedy
gsub("str.*re", "[...]", lazygreedy, perl=T) # greedy
gsub("str.*?re", "[...]", lazygreedy, perl=T) # lazy
gsub("[aouei]+", "X", lazygreedy2, perl=T) # greedy
lazygreedy2 <- c("groeiaandeel", "groeistelsel"); lazygreedy2
gsub("[aouei]+", "X", lazygreedy2, perl=T) # greedy
gsub("[aouei]+?", "X", lazygreedy2, perl=T) # lazy
enkele_losse_testwoorden <- c("over", "overdosis", "overspannen", "Over", "daarover")
grep("^over$", enkele_losse_testwoorden, value=T, ignore.case=T)
grep("over", enkele_losse_testwoorden, value=T, ignore.case=T)
ankers <- c("Daar loopt Jan Janssens.", "Waar loopt Jan Janssens?", "Ik vroeg waar hij liep!")
ankers
gsub("[dw]aar", "HIER", ankers, perl=T, ignore.case=T)
gsub("^[dw]aar", "HIER", ankers, perl=T, ignore.case=T)
ankers
gsub("\\bJan\\b", "Johan", ankers, perl=T)
# 1. werkmap
setwd("~/Dropbox/@ Documenten/Colleges - courses/Synchronische studie/HOC/4 - Zoeken in en omgaan met tekst/") # CTRL + SHIFT + H
# 2. Conscience-bestand inladen
wonder <- scan("Conscience 1837 - In t wonderjaer.txt", what=character(0), encoding ="UTF-8")
# 3. lower case
wonder <- tolower(wonder)
# 4. interpunctie weghalen
wonder <- gsub("\\W+", "", wonder, perl=T)
# 5. geuzen/spaenjaerden
geus <- grep("^geu(s|zen)$", wonder, value=T); geus
length(geus)
spaenjaerd <- grep("^spaenjaerd(en)?$", wonder, value=T); spaenjaerd
length(spaenjaerd)
# 7. -naer/-laer
aar <- grep("\\b\\w{3,}[nl]ae?r(en|s)?\\b", wonder, value=T); aar
grondwoord <- gsub("\\b(\\w{3,}[nl])ae?r(en|s)?\\b", "\\1", aar, perl=T); grondwoord
# 7. -naer/-laer
aar <- grep("\\b\\w{3,}[nl]ae?r(en|s)?\\b", wonder, value=T); aar
grondwoord <- gsub("\\b(\\w{3,}[nl])ae?r(en|s)?\\b", "\\1", aar, perl=T); grondwoord
sort(table(grondwoord)) # bedel-, luisbekel-, minn-, reden-, kunsten-
length(aar)
rm(list=ls(all=TRUE))
source("exact_matches.r")
corpus <- c("I don't know half of you half as well as I should like.", "And I like less than half of you half as well as you deserve.")
corpus
exact.matches("half", corpus)
exact.matches("half", corpus)[[4]]
# ev. opslaan:
concordanties_half_2 <- exact.matches("half", corpus)[[4]]
concordanties_half_2
resultaten_half <- exact.matches("half", corpus)
resultaten_half[[1]] # matches zelf
resultaten_half[[4]] # matches in context/concordanties
# eventueel ook nog eens opslaan:
concordanties_half <- resultaten_half[[4]]
concordanties_half
exact.matches("half", corpus)[[4]]
# ev. opslaan:
concordanties_half_2 <- exact.matches("half", corpus)[[4]]
concordanties_half_2
concordanties <- exact.matches("half", corpus)[[4]]
concordanties
write.table(concordanties, file="concordanties_voorbeeld.txt", sep="\t", quote=F)
